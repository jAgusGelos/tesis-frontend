{"version":3,"sources":["./src/app/pages/call-for-papers/call-for-papers.component.ts","./src/app/pages/call-for-papers/call-for-papers.component.html","./src/app/pages/call-for-papers/call-for-papers.component.css","./src/app/pages/call-for-papers/call-for-papers-routing.module.ts","./src/app/pages/call-for-papers/call-for-papers.module.ts"],"names":["CallForPapersComponent","paperService","router","toastr","paperList","edit","paper","simposios","okey","ready","revision","this","routeReuseStrategy","shouldReuseRoute","window","scrollTo","getSimposios","getPaper","getSimposiosActivos","subscribe","res","data","id","autores","responsable","nombre","estado","simposio","archivo","item","deletePaper","success","navigateByUrl","console","log","postPaper","putPaper","sendPaper","finalPaper","selector","template","routes","path","component","CallForPapersRoutingModule","imports","forChild","exports","CallForPapersModule","declarations","schemas"],"mappings":"qOAWaA,EAAsB,MAUjC,YAAoBC,EACAC,EACAC,GAFA,KAAAF,eACA,KAAAC,SACA,KAAAC,SAVpB,KAAAC,UAAY,GACZ,KAAAC,MAAO,EACP,KAAAC,MAAQ,GACR,KAAAC,UAAY,GACZ,KAAAC,MAAO,EACP,KAAAC,OAAQ,EACR,KAAAC,UAAW,EAMGC,KAAKT,OAAOU,mBAAmBC,iBAAmB,KACzC,EAGvB,WACEC,OAAOC,SAAS,EAAG,GACnBJ,KAAKK,eACLL,KAAKM,WAGP,eACEN,KAAKV,aAAaiB,sBAAsBC,UAAWC,IACjDT,KAAKJ,UAAYa,EAAIC,OAIzB,WACEV,KAAKV,aAAagB,WAAWE,UAAWC,IACtCT,KAAKP,UAAYgB,EAAIC,KACrBV,KAAKH,MAAO,IAIhB,WACEG,KAAKN,MAAQM,KAAKN,KAClBM,KAAKL,MAAQ,CACXgB,GAAI,GACJC,QAAS,GACTC,YAAa,GACbC,OAAQ,GACRC,OAAQ,YACRC,SAAU,GACVC,QAAS,MAIb,UAAUtB,GACRK,KAAKN,MAAQM,KAAKN,KAClBM,KAAKL,MAAQA,EAGf,YAAYuB,GACVlB,KAAKV,aAAa6B,YAAYD,GAAMV,UAAWC,IAC7CT,KAAKR,OAAO4B,QAAQ,4CACpBpB,KAAKT,OAAO8B,cAAc,oBAY7B,kBAAkBH,GACjBI,QAAQC,IAAIL,GAEI,KAAZA,EAAKP,GACPX,KAAKV,aAAakC,UAAUN,GAAMV,UAAWC,IAC3CT,KAAKR,OAAO4B,QAAQ,8BACpBpB,KAAKT,OAAO8B,cAAc,oBAI5BrB,KAAKV,aAAamC,SAASP,GAAMV,UAAWC,IAC1CT,KAAKR,OAAO4B,QAAQ,kCACpBpB,KAAKT,OAAO8B,cAAc,oBAKhC,UAAUH,GACRlB,KAAKV,aAAaoC,UAAUR,GAAMV,UAAWC,IAC3CT,KAAKR,OAAO4B,QAAQ,iBACpBpB,KAAKT,OAAO8B,cAAc,oBAK9B,WAAWH,GAETlB,KAAKF,OAAQ,EACbE,KAAKL,MAAQuB,EAIf,mBACElB,KAAKF,OAAQ,EAGf,YAAYoB,GAEVlB,KAAKL,MAAQuB,EACblB,KAAKD,UAAW,EAGlB,aAAamB,GAEXlB,KAAKV,aAAaqC,WAAWT,GAAMV,UAAWC,IAC5CT,KAAKR,OAAO4B,QAAQ,qCACpBpB,KAAKT,OAAO8B,cAAc,oBAI9B,iBACErB,KAAKD,UAAW,I,4BAhIX,K,MAHA,K,MACA,MASIV,EAAsB,aALlC,YAAU,CACTuC,SAAU,sBACVC,SCRa,w1B,QCAA,OFWFxC,GGPb,MAAMyC,EAAiB,CACrB,CACEC,KAAM,GACNC,UAAW3C,I,IAQF4C,EAA0B,QAA1BA,EAA0B,aAJtC,YAAS,CACRC,QAAS,CAAC,IAAaC,SAASL,IAChCM,QAAS,CAAC,QAECH,G,oBCIAI,EAAmB,QAAnBA,EAAmB,aAX/B,YAAS,CACRC,aAAc,CACZjD,GAEF6C,QAAS,CACP,IACAD,EACA,KAEFM,QAAS,CAAC,QAECF","file":"11.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { IntPaper } from 'src/app/core/models/IntPaper';\nimport { PaperService } from 'src/app/core/services/paper.service';\n\n@Component({\n  selector: 'app-call-for-papers',\n  templateUrl: './call-for-papers.component.html',\n  styleUrls: ['./call-for-papers.component.css']\n})\nexport class CallForPapersComponent implements OnInit {\n\n  paperList = [];\n  edit = false;\n  paper = {};\n  simposios = [];\n  okey = false;\n  ready = false;\n  revision = false;\n\n  constructor(private paperService: PaperService,\n              private router: Router,\n              private toastr: ToastrService,\n              ) {\n                this.router.routeReuseStrategy.shouldReuseRoute = () => {\n                  return false;\n                }; }\n\n  ngOnInit(): void {\n    window.scrollTo(0, 0);\n    this.getSimposios();\n    this.getPaper();\n  }\n\n  getSimposios(): void {\n    this.paperService.getSimposiosActivos().subscribe((res: any) => {\n      this.simposios = res.data;\n    });\n  }\n\n  getPaper(): void {\n    this.paperService.getPaper().subscribe((res: any) => {\n      this.paperList = res.data;\n      this.okey = true;\n    });\n  }\n\n  newPaper(): void {\n    this.edit = !this.edit;\n    this.paper = {\n      id: '',\n      autores: [],\n      responsable: '',\n      nombre: '',\n      estado: 'sin subir',\n      simposio: '',\n      archivo: null,\n    };\n  }\n\n  editPaper(paper: any): void {\n    this.edit = !this.edit;\n    this.paper = paper;\n  }\n\n  deletePaper(item: IntPaper): void {\n    this.paperService.deletePaper(item).subscribe((res: any) => {\n      this.toastr.success('El paper ha sido eliminado correctamente');\n      this.router.navigateByUrl('/callForPapers');\n    });\n  }\n\n\n  /**\n   *\n   * @param x Objeto compuesto de IntPaper\n   * Recibe un paper, chequea que tenga un id.\n   * Si lo tiene hace un PUT al back. Actualiza un paper creado.\n   * Si no lo tiene crea un nuevo paper.\n   */\n   toggleCreatePaper(item: any): void {\n    console.log(item);\n\n    if (item.id === '') {\n      this.paperService.postPaper(item).subscribe((res: any) => {\n        this.toastr.success('Paper Creado Correctamente');\n        this.router.navigateByUrl('/callForPapers');\n      });\n    }\n    else{\n      this.paperService.putPaper(item).subscribe((res: any) => {\n        this.toastr.success('Paper Modificado Correctamente');\n        this.router.navigateByUrl('/callForPapers');\n      });\n    }\n  }\n\n  sendPaper(item: any): void {\n    this.paperService.sendPaper(item).subscribe((res: any) => {\n      this.toastr.success('Paper Enviado');\n      this.router.navigateByUrl('/callForPapers');\n    });\n  }\n\n\n  finalPaper(item: any): void {\n    // ir a la página para el camera ready\n    this.ready = true;\n    this.paper = item;\n\n  }\n\n  volverFinalPaper(): void {\n    this.ready = false;\n  }\n\n  verRevision(item: any): void {\n    // Abrir la revisión\n    this.paper = item;\n    this.revision = true;\n  }\n\n  entregaFinal(item: any): void {\n    // Se envia el paper ya camera ready listo\n    this.paperService.finalPaper(item).subscribe((res: any) => {\n      this.toastr.success('El camera ready ha sido entregado');\n      this.router.navigateByUrl('/callForPapers');\n    });\n  }\n\n  volverRevision(): void {\n    this.revision = false;\n  }\n\n}\n\n","export default \"<div class=\\\"container-fluid\\\">\\n  <app-paper-list *ngIf=\\\"!edit && okey && !ready && !revision\\\" (newPaperEvent)='newPaper()'\\n  [paperList]='paperList'\\n  (finalPaperEvent)='finalPaper($event)'\\n  (revisionEvent)='verRevision($event)'\\n  (editPaperEvent)='editPaper($event)' (deletePaperEvent)='deletePaper($event)'></app-paper-list>\\n\\n  <app-paper-form  *ngIf=\\\"edit\\\"\\n  (sendEmitter)='sendPaper($event)'\\n  [simposios] = \\\"simposios\\\"\\n  [paper]='paper' (paperEmitter)='toggleCreatePaper($event)'\\n  (cancelPaper)='newPaper()'></app-paper-form>\\n\\n  <app-paper-ready\\n  *ngIf=\\\"ready\\\"\\n  (paperEmitter)='entregaFinal($event)'\\n  [paper]='paper'\\n  (cancelPaper)='volverFinalPaper()'></app-paper-ready>\\n\\n  <app-revision-autor\\n  *ngIf=\\\"revision\\\"\\n  [paper]='paper'\\n  (cancelRevision)='volverRevision()'\\n  ></app-revision-autor>\\n\\n\\n</div>\\n\";","export default \"\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CallForPapersComponent } from './call-for-papers.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CallForPapersComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CallForPapersRoutingModule { }\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CallForPapersRoutingModule } from './call-for-papers-routing.module';\nimport { CallForPapersComponent } from './call-for-papers.component';\nimport { CoreModule } from 'src/app/core/core.module';\n\n\n@NgModule({\n  declarations: [\n    CallForPapersComponent,\n  ],\n  imports: [\n    CommonModule,\n    CallForPapersRoutingModule,\n    CoreModule\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class CallForPapersModule { }\n"],"sourceRoot":"webpack:///"}