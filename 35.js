(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{"4aEt":function(t,e,a){"use strict";a.r(e),a.d(e,"EvaluatorModule",function(){return b});var s=a("mrSG"),n=a("fXoL"),o=a("ofXK"),i=a("tyNb"),l=a("5eHb"),r=a("KaZm"),d=a("y6im");let c=class{constructor(t,e){this.evaluatorService=t,this.toastr=e,this.evaluatorList=[],this.evaluatorSelectedList=[],this.adding=!1,this.evaluatorSelectedId=[],this.notLoaded=!0,this.showListSelected=[],this.showListNotSelected=[]}ngOnInit(){window.scrollTo(0,0),this.getEvaluatorSelected()}getEvaluators(){this.evaluatorService.getEvaluatorsSimposio().subscribe(t=>{0!==t.data.length?(this.evaluatorList=t.data.filter(t=>{if(!this.evaluatorSelectedId.includes(t.idEvaluador))return t}),this.showListNotSelected=this.evaluatorList.slice()):this.toastr.info("Lo sentimos, actualmente no disponemos de m\xe1s evaluadores.")})}getEvaluatorSelected(){this.evaluatorService.getEvaluatorsGroup().subscribe(t=>{this.evaluatorSelectedList=t.data,this.evaluatorSelectedId=t.data.map(t=>t.idEvaluador),this.showListSelected=t.data,this.getEvaluators()})}addEvaluator(t){this.evaluatorService.postEvaluatorGroup(t.idEvaluador).subscribe(e=>{this.evaluatorList=this.evaluatorList.filter(e=>{if(e.idEvaluador!==t.idEvaluador)return e}),this.showListNotSelected=this.evaluatorList.slice(),this.evaluatorSelectedList.push(t),this.showListSelected=this.evaluatorSelectedList.slice()})}loadAll(){this.toastr.show("Atenci\xf3n, los evaluadores que est\xe1 por cagar no pertenecen a su simposio. \xbfDesea hacerlo de todas formas?","\xbfAgregar m\xe1s evaluadores?",{toastComponent:r.a,disableTimeOut:!0,tapToDismiss:!1,enableHtml:!0}).onAction.subscribe(()=>{this.evaluatorService.getEvaluatorsAll().subscribe(t=>{this.evaluatorList=t.data.filter(t=>{if(!this.evaluatorSelectedId.includes(t.idEvaluador))return t}),this.showListNotSelected=this.evaluatorList.slice()})})}toggleRemoveHandled(t){this.toastr.show("Est\xe1 seguro que desea eliminar el evaluador "+t.nombreEv+" "+t.apellidoEv+"? \nToda la configuraci\xf3n creada se perder\xe1","\xbfEliminar Evaluador?",{toastComponent:r.a,disableTimeOut:!0,tapToDismiss:!1,enableHtml:!0}).onAction.subscribe(()=>{this.evaluatorService.deleteEvaluatorGroup(t.idEvaluador).subscribe(e=>{this.evaluatorList.push(t),this.evaluatorSelectedList=this.evaluatorSelectedList.filter(e=>{if(e.idEvaluador!==t.idEvaluador)return t}),this.showListNotSelected.push(t),this.showListSelected=this.evaluatorSelectedList.slice()})})}searchSelected(t){this.showListSelected=t}searchNotSelected(t){this.showListNotSelected=t}};c.ctorParameters=()=>[{type:d.a},{type:l.d}],c=Object(s.c)([Object(n.o)({selector:"app-evaluator",template:'<div class="container-fluid">\n  <div class="contenidos">\n    <hr />\n    <h3 class="text-center">Evaluadores Activos</h3>\n    <hr />\n  </div>\n  <br />\n  <div class="row">\n    <div class="col-md-6">\n      <div class="row">\n        <app-search [fullList]=\'evaluatorList\' [attribFilter]=\'"nombreEv"\'\n          (listEvent)=\'searchNotSelected($event)\'></app-search>\n      </div>\n      <table class="table text-center table-hover table-bordered">\n        <thead class="thead">\n          <tr>\n            <th class="col-md-4">Evaluadores Disponibles</th>\n            <th class="col-md-2">Sede</th>\n            <th class="col-md-2">Acciones</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr class="align-items-center" *ngFor="let item of showListNotSelected">\n            <td>{{ item.nombreEv }} {{item.apellidoEv}}</td>\n            <td>UTN FRC</td>\n\n            <td>\n              <div class="btn-group col-md-3 text-center">\n                <a (click)="addEvaluator(item)" title="Agregar"><i class="fas fa-plus"></i></a>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <a *ngIf="notLoaded" class="btn btn-primary btn-block col-md-12 alerta " role="button"\n        (click)=\'loadAll()\'>\xa1Necesito m\xe1s Evaluadores!</a>\n\n\n    </div>\n    <div class="col-md-6">\n      <div class="row">\n        <app-search [fullList]=\'evaluatorSelectedList\' [attribFilter]=\'"nombreEv"\'\n          (listEvent)=\'searchSelected($event)\'></app-search>\n      </div>\n\n      <table class="table text-center table-hover table-bordered">\n        <thead class="thead">\n          <tr>\n            <th class="col-md-4">Evaluadores Seleccionados</th>\n            <th class="col-md-2">Sede</th>\n            <th class="col-md-2">Acciones</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr class="align-items-center" *ngFor="let item of showListSelected">\n            <td>{{ item.nombreEv }} {{item.apellidoEv}}</td>\n            <td>UTN FRC</td>\n            <td>\n              <div class="btn-group col-md-3 text-center">\n                <a (click)="toggleRemoveHandled(item)" title="Eliminar"><i class="fas fa-trash"></i></a>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </div>\n\n\n  <br />\n</div>\n',styles:[".container-fluid{\n  background-color: #F4F4F4;\n\n}\n\n.contenidos{\n  padding-bottom: 3rem;\n}\n\n.thead{\n  background-color: #C8E5F1;\n}\n\n.greyned{\n  color: grey;\n}\n\n.btn-primary{\n  background-color: #3CAFE0 ;\n  border: none;\n}\n\ni{\n  padding-top: 0.5rem;\n  cursor: pointer;\n}\n\ni:hover{\n  color: blue;\n}\n\n.fas{\n  font-size: 1.25rem;\n  color: #00609C;\n}\n\nhr{\n  border:#00609C solid 1px;\n}\n\n@media (min-width: 768px) {\n  hr{\n    margin-left: 25%;\n    margin-right: 25%;\n\n  }\n\n  .container-fluid{\n    padding: 5rem;\n  }\n\n }\n\n"]})],c);const h=[{path:"",component:c}];let u=class{};u=Object(s.c)([Object(n.N)({imports:[i.c.forChild(h)],exports:[i.c]})],u);var v=a("pKmL"),m=a("3Pt+");let b=class{};b=Object(s.c)([Object(n.N)({declarations:[c],imports:[o.c,u,m.f,v.a],schemas:[n.j]})],b)}}]);
//# sourceMappingURL=35.js.map